// Least Common Ancestor of any number of nodes in Binary Tree
// Following is the Binary Tree Node class structure.

    template <typename T>
    class BinaryTreeNode {
    public :
	    T data;
	    BinaryTreeNode<T> *left;
	    BinaryTreeNode<T> *right;

	    BinaryTreeNode(T data) {
	        this -> data = data;
	        left = NULL;
	        right = NULL;
	    }
    };

// 3 important points
//  # Agar left null hai to right bhejdo
//  # Agar right null hai to left bhejdo
//  # Agar dono not null hai then root bhejdo

BinaryTreeNode<int>* lcaOfThreeNodes(BinaryTreeNode<int>* root, int node1, int node2, int node3) {
    // Write your code here.
 	if(root == nullptr or root->data == node1 or root->data == node2 or root->data == node3)
        return root;
    BinaryTreeNode<int>* left = lcaOfThreeNodes(root->left, node1, node2, node3);

    BinaryTreeNode<int>* right = lcaOfThreeNodes(root->right, node1, node2, node3);

    if(left == nullptr){
        return right;
    }
	else if(right == nullptr){
        return left;
    }
	else{
        return root;
    }
}