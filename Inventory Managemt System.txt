#include<iostream>
#include<vector>
#include<string>
#include<sstream>
#include<fstream>
using namespace std;

class Product
{
    private:
        int product_id;
        string product_name;
        string category;
        double price;
        int quantity;
    
    public:
        Product(int product_id, string product_name, string category, double price, int quantity)
        {
            this->product_id=product_id;
            this->product_name=product_name;
            this->category=category;
            this->price=price;
            this->quantity=quantity;
        }

        int getProduct_id() const{
            return product_id;
        }

        void setProduct_id(int product_id){
            this->product_id=product_id;
        }

        string getProduct_name() const{
            return product_name;
        }

        void setProduct_name(string product_name){
            this->product_name=product_name;
        }

        string getCategory() const{
            return category;
        }

        void setCategory(string category){
            this->category=category;
        }

        double getPrice() const{
            return price;
        }

        void setPrice(double price){
            this->price=price;
        }

        int getQuantity() const{
            return quantity;
        }

        void setQuantity(int quantity){
            this->quantity=quantity;
        }
};

class Inventory
{
    private:
        vector<Product> products;
    
    public:
        void addProduct(Product product)
        {
            bool found = false;
            for (auto& p : products)
            {
                if (p.getProduct_id() == product.getProduct_id())
                {
                    cout << "Product_id already Exist."<< endl;
                    found = true;
                    break;
                }
            }
            if (!found)
            {
                products.push_back(product);
                cout << "Product added successfully." << endl;
                cout << "-----------------------------------------------------------" <<endl;
            }
        }            

        void removeProduct(int product_id)
        {
            bool found = false;
            for (auto i = products.begin(); i != products.end(); i++)
            {
                if (i->getProduct_id() == product_id)
                {
                    products.erase(i);
                    found = true;
                    cout << "Product removed successfully." << endl;        
                    cout << "-----------------------------------------------------------" <<endl;
                    break;
                }
            }
            if (!found)
            {
                cout << "Product_id does not exist" << endl;
            }
        }

        Product* findProduct(int product_id)
        {
            for(auto i=products.begin();i!=products.end();i++)
            {
                if(i->getProduct_id()==product_id)
                {
                    return &(*i);
                }
            }
            return nullptr;
        }

        void updateProduct(int product_id, string product_name, string category, double price, int quantity)
        {
            bool found = false;
            for (auto i = products.begin(); i != products.end(); i++)
            {
                if (i->getProduct_id() == product_id)
                {
                    i->setProduct_name(product_name);
                    i->setCategory(category);
                    i->setPrice(price);
                    i->setQuantity(quantity);
                    found = true;
                    break;
                }
            }
            if (!found)
            {
                cout << "PRODUCT_ID does not exist." << endl;
            }
        }        

        void printProduct() const{
            for(auto i=products.begin();i!=products.end();i++)
            {
                cout<<"\nThe Product details are: "<<i->getProduct_id()<<endl;
                cout<<"PRODUCT_ID : "<<i->getProduct_id()<<endl;
                cout<<"Product_name : "<<i->getProduct_name()<<endl;
                cout<<"Category : "<<i->getCategory()<<endl;
                cout<<"Price : $"<<i->getPrice()<<endl;
                cout<<"Quantity : "<<i->getQuantity()<<endl;
            }
        }

        void saveInventoryToFile(string fileproduct_name) 
        {
            ofstream file;
            file.open(fileproduct_name, ios::out | ios::app);
            for (int i = 0; i < products.size(); i++) 
            {
                Product p = products[i];
                file << p.getProduct_id() << "," << p.getProduct_name() << "," << p.getCategory() << "," << p.getPrice() << "," << p.getQuantity() << endl;
            }
            file.close();
        }

    void loadInventoryFromFile(string fileproduct_name) 
    {
        ifstream file;
        file.open(fileproduct_name);

        if (file.is_open()) 
        {
            string line;
            while (getline(file, line)) 
            {
                stringstream ss(line);
                string product_idStr, product_name, category, priceStr, quantityStr;
                getline(ss, product_idStr, ',');
                getline(ss, product_name, ',');
                getline(ss, category, ',');
                getline(ss, priceStr, ',');
                getline(ss, quantityStr, ',');

                int product_id = stoi(product_idStr);
                double price = stod(priceStr);
                int quantity = stoi(quantityStr);

                Product p(product_id, product_name, category, price, quantity);
                products.push_back(p);
            }

            file.close();
        } else {
            cout << "Error: Could not open file " << fileproduct_name << endl;
        }
    }
};

int main() {
    char choice;
    Inventory inventory;
    cout << "\nEnterning to Inventory Management System " <<endl;

    do {
        cout << "Please choose an option:" << endl;
        cout << "1: Add a new product" << endl;
        cout << "2: Remove a product" << endl;
        cout << "3: Find a product" << endl;
        cout << "4: Update an existing product" << endl;
        cout << "5: View all products" << endl;
        cout << "6: Save inventory to file" << endl;
        cout << "7: Load Inventory from file" << endl;
        cout << "Q: Quit" << endl;
        cin >> choice;

        switch (choice) {
        case '1': {
            int product_id;
            string product_name, category;
            double price;
            int quantity;
            cout << "Enter product ID: ";
            cin >> product_id;
            cout << "Enter product product_name: ";
            cin >> product_name;
            cout << "Enter product category: ";
            cin >> category;
            cout << "Enter product price: $ ";
            cin >> price;
            cout << "Enter product quantity: ";
            cin >> quantity;
            Product product(product_id, product_name, category, price, quantity);
            inventory.addProduct(product);
            break;
        }

        case '2': {
            int product_id;
            cout << "Enter product product_id: ";
            cin >> product_id;
            inventory.removeProduct(product_id);
            break;
        }

        case '3': {
            int product_id;
            cout << "Enter product product_id: ";
            cin >> product_id;
            Product* product = inventory.findProduct(product_id);
            if (product) {
                cout << "Product_name: " << product->getProduct_name() << endl;
                cout << "Category: " << product->getCategory() << endl;
                cout << "Price: INR " << product->getPrice() << endl;
                cout << "Quantity: " << product->getQuantity() << endl;
            }
            else {
                cout << "Product not found." << endl;
            }
            break;
        }

        case '4': {
            int product_id;
            string product_name, category;
            double price;
            int quantity;
            cout << "Enter the product id: ";
            cin >> product_id;
            cout << "Enter new product name: ";
            cin >> product_name;
            cout << "Enter new product category: ";
            cin >> category;
            cout << "Enter new product price: $ ";
            cin >> price;
            cout << "Enter new product quantity: ";
            cin >> quantity;
            inventory.updateProduct(product_id, product_name, category, price, quantity);
            cout << "Product updated successfully." << endl;
            break;
        }

        case '5': {
            inventory.printProduct();
            break;
        }
        case '6': {
            inventory.saveInventoryToFile("inventory.csv");
            cout << "Inventory saved to file." << endl;
            break;
        }
        case '7': {
            inventory.loadInventoryFromFile("inventory.csv");
            cout << "Inventory loaded from file." << endl;
            break;
        }
        case 'q':
        case 'Q':
            cout << "Goodbye!" << endl;
            return 0;
        
        default:
            cout << "Invalid Choice. Please Try again" << endl;
            break;
        }
    } while (true);

    return 0;
}